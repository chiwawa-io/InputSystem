//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game/Scripts/Input/GameInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputAsset"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""17c19986-2aa5-457f-8648-3300bfc7f17f"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""e114547b-28dd-4997-a094-05833689c554"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""30f14109-b240-41ed-a74d-e8f294d1581d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldBreak"",
                    ""type"": ""Button"",
                    ""id"": ""0dc4f30a-dcb7-46ad-ab94-9dc13dbf12cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MultiTapBreak"",
                    ""type"": ""Button"",
                    ""id"": ""dbfdac6a-d9f0-49ad-b23b-ff18a7abb208"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""872bc5bf-d1b0-4c5d-8553-51ff7f40013f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""56dbb424-6db9-404a-9f5f-abbecfcd3729"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7bf6d07-7fd2-4934-a10b-82e4cbd24285"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f6ea1f0e-fd66-4d45-8167-5418442eeab7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2f5bfe46-57ed-413e-8b6c-341c83410da5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3939cb0f-23c9-4298-9eda-9a0b9b0c0731"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""801e2da9-a1c4-44e1-8fda-be797d57ffc2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c50aa45-244a-449c-a812-3534f48044ec"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MultiTapBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hacked"",
            ""id"": ""177bd62a-0d34-49df-8558-1e4d35bc12a1"",
            ""actions"": [
                {
                    ""name"": ""ChangeCameras"",
                    ""type"": ""Button"",
                    ""id"": ""baf3b1e2-ce1f-468c-87c9-b89a16e89662"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""8188c5b1-e5c4-47c6-b8fa-40adfc9fac7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c23976f-35f2-4864-9966-7dbbb03935cc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66b21087-0f11-447e-93c9-71ac19edcac9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""4b67c820-efb3-4d85-98af-aa615d9e6c87"",
            ""actions"": [
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Value"",
                    ""id"": ""1b8b6385-85c9-44ab-b4bf-cd1f20a8ae66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Button"",
                    ""id"": ""aaf115ba-671c-4ddf-a92a-aca6e0804555"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""7f9b0299-2c1f-43ff-90fc-8d08c9558dcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a9a2c919-6cd1-4eaf-b73a-109ccfc78b28"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dbe2e78f-fcc9-4f06-a112-cae84e280fa7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3161d4b7-fb37-46d7-acca-7c092f7be1b6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0db1cc04-a713-45af-8e77-24293de554ed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e7b8f727-e06c-4f52-a39d-d3d80960e922"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f3efb40e-c788-4d27-bcff-45a4f163651f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""33cb3587-2186-4114-aa4e-2b0015f94070"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4725cf04-80c3-4915-ad76-e1f49b4a6a0c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b72bc64f-ae2f-4830-894f-47571d1ef6af"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7915ab73-9dab-449e-bb6b-768aafff0ffb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cb91b47e-9fa8-41fc-a045-1bb4f7fab9d6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""a1d50013-5578-4b58-bb98-a7ce81b16e0c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""256ae82f-1580-4805-9dd6-48b2c9c01e69"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Button"",
                    ""id"": ""9f32ac17-8bef-4136-aa86-f709af630f5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""79b9ada0-8381-4d53-8acd-19d338751462"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3ae729c-dcc6-4748-a722-1a92b020ed12"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""29501aa5-2eac-47f7-9efa-ea2c0255ec0f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ddef9432-31ba-48f9-abed-9d51657644f7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""934e5430-5df8-4672-945a-84ec112c3085"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8931dda1-21bb-4e1b-87f7-31778291abcf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5de3961f-1b61-43ea-b564-b94931dd7b10"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b72b3721-5585-463a-9e9a-d37f2f2c8502"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Walk = m_Player.FindAction("Walk", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_HoldBreak = m_Player.FindAction("HoldBreak", throwIfNotFound: true);
        m_Player_MultiTapBreak = m_Player.FindAction("MultiTapBreak", throwIfNotFound: true);
        // Hacked
        m_Hacked = asset.FindActionMap("Hacked", throwIfNotFound: true);
        m_Hacked_ChangeCameras = m_Hacked.FindAction("ChangeCameras", throwIfNotFound: true);
        m_Hacked_Exit = m_Hacked.FindAction("Exit", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_Tilt = m_Drone.FindAction("Tilt", throwIfNotFound: true);
        m_Drone_UpDown = m_Drone.FindAction("UpDown", throwIfNotFound: true);
        m_Drone_Rotate = m_Drone.FindAction("Rotate", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_Movement = m_Forklift.FindAction("Movement", throwIfNotFound: true);
        m_Forklift_UpDown = m_Forklift.FindAction("UpDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Walk;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_HoldBreak;
    private readonly InputAction m_Player_MultiTapBreak;
    public struct PlayerActions
    {
        private @GameInputAsset m_Wrapper;
        public PlayerActions(@GameInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Player_Walk;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @HoldBreak => m_Wrapper.m_Player_HoldBreak;
        public InputAction @MultiTapBreak => m_Wrapper.m_Player_MultiTapBreak;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @HoldBreak.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldBreak;
                @HoldBreak.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldBreak;
                @HoldBreak.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldBreak;
                @MultiTapBreak.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMultiTapBreak;
                @MultiTapBreak.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMultiTapBreak;
                @MultiTapBreak.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMultiTapBreak;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @HoldBreak.started += instance.OnHoldBreak;
                @HoldBreak.performed += instance.OnHoldBreak;
                @HoldBreak.canceled += instance.OnHoldBreak;
                @MultiTapBreak.started += instance.OnMultiTapBreak;
                @MultiTapBreak.performed += instance.OnMultiTapBreak;
                @MultiTapBreak.canceled += instance.OnMultiTapBreak;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Hacked
    private readonly InputActionMap m_Hacked;
    private IHackedActions m_HackedActionsCallbackInterface;
    private readonly InputAction m_Hacked_ChangeCameras;
    private readonly InputAction m_Hacked_Exit;
    public struct HackedActions
    {
        private @GameInputAsset m_Wrapper;
        public HackedActions(@GameInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeCameras => m_Wrapper.m_Hacked_ChangeCameras;
        public InputAction @Exit => m_Wrapper.m_Hacked_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Hacked; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HackedActions set) { return set.Get(); }
        public void SetCallbacks(IHackedActions instance)
        {
            if (m_Wrapper.m_HackedActionsCallbackInterface != null)
            {
                @ChangeCameras.started -= m_Wrapper.m_HackedActionsCallbackInterface.OnChangeCameras;
                @ChangeCameras.performed -= m_Wrapper.m_HackedActionsCallbackInterface.OnChangeCameras;
                @ChangeCameras.canceled -= m_Wrapper.m_HackedActionsCallbackInterface.OnChangeCameras;
                @Exit.started -= m_Wrapper.m_HackedActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_HackedActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_HackedActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_HackedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeCameras.started += instance.OnChangeCameras;
                @ChangeCameras.performed += instance.OnChangeCameras;
                @ChangeCameras.canceled += instance.OnChangeCameras;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public HackedActions @Hacked => new HackedActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_Tilt;
    private readonly InputAction m_Drone_UpDown;
    private readonly InputAction m_Drone_Rotate;
    public struct DroneActions
    {
        private @GameInputAsset m_Wrapper;
        public DroneActions(@GameInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tilt => m_Wrapper.m_Drone_Tilt;
        public InputAction @UpDown => m_Wrapper.m_Drone_UpDown;
        public InputAction @Rotate => m_Wrapper.m_Drone_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @Tilt.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Tilt.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Tilt.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @UpDown.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnUpDown;
                @UpDown.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnUpDown;
                @UpDown.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnUpDown;
                @Rotate.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tilt.started += instance.OnTilt;
                @Tilt.performed += instance.OnTilt;
                @Tilt.canceled += instance.OnTilt;
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_Movement;
    private readonly InputAction m_Forklift_UpDown;
    public struct ForkliftActions
    {
        private @GameInputAsset m_Wrapper;
        public ForkliftActions(@GameInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Forklift_Movement;
        public InputAction @UpDown => m_Wrapper.m_Forklift_UpDown;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMovement;
                @UpDown.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnUpDown;
                @UpDown.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnUpDown;
                @UpDown.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnUpDown;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);
    public interface IPlayerActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnHoldBreak(InputAction.CallbackContext context);
        void OnMultiTapBreak(InputAction.CallbackContext context);
    }
    public interface IHackedActions
    {
        void OnChangeCameras(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnTilt(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
    }
}
